from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from flask import Flask, request
import asyncio

app = Flask(__name__)

BOT_TOKEN = "8390374974:AAHCvCO74H-QcUqE6o2VCk6BDs5Ewb5yaQ4"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING, SALARY, DAYS_M, DAYS_F, DAYS_15, DAYS_31 = range(6)

# –°–æ–∑–¥–∞–µ–º application –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
application = Application.builder().token(BOT_TOKEN).build()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["1 - –ó–∞ –≤–µ—Å—å –º–µ—Å—è—Ü", "2 - 25 —á–∏—Å–ª–∞"], ["3 - 10 —á–∏—Å–ª–∞"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )

    await update.message.reply_text(
        "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—á–µ—Ç–∞:\n"
        "1 - –£–∑–Ω–∞—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü\n"
        "2 - –£–∑–Ω–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ 25 —á–∏—Å–ª–∞\n"
        "3 - –£–∑–Ω–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ 10 —á–∏—Å–ª–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
    )
    return CHOOSING


async def choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice_text = update.message.text
    if "1" in choice_text:
        context.user_data["choice"] = 1
    elif "2" in choice_text:
        context.user_data["choice"] = 2
    elif "3" in choice_text:
        context.user_data["choice"] = 3
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return CHOOSING

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–∫–ª–∞–¥ (—Ä—É–±):")
    return SALARY


async def get_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["salary"] = float(update.message.text)
        choice = context.user_data["choice"]

        if choice == 1:
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ?")
            return DAYS_M
        elif choice == 2:
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å 1 –ø–æ 15 —á–∏—Å–ª–æ?")
            return DAYS_15
        elif choice == 3:
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å 1 –ø–æ 30/31 —á–∏—Å–ª–æ?")
            return DAYS_31
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –æ–∫–ª–∞–¥–∞:")
        return SALARY


async def get_days_m(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["day_m"] = float(update.message.text)
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏?")
        return DAYS_F
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return DAYS_M


async def get_days_15(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["day_15"] = float(update.message.text)
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏–∑ –Ω–∏—Ö –≤—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏?")
        return DAYS_F
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return DAYS_15


async def get_days_31(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["day_31"] = float(update.message.text)
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏–∑ –Ω–∏—Ö –≤—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏?")
        return DAYS_F
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return DAYS_31


async def get_days_f(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days_f = float(update.message.text)
        choice = context.user_data["choice"]
        salary = context.user_data["salary"]
        ndfl = salary * 0.13

        if choice == 1:
            day_m = context.user_data["day_m"]
            result = salary / day_m * days_f - ndfl
            text = "–∑–∞ –º–µ—Å—è—Ü"
        elif choice == 2:
            day_15 = context.user_data["day_15"]
            result = salary / day_15 * days_f - ndfl
            text = "25 —á–∏—Å–ª–∞"
        elif choice == 3:
            day_31 = context.user_data["day_31"]
            result = salary / day_31 * days_f - ndfl
            text = "10 —á–∏—Å–ª–∞"

        await update.message.reply_text(
            f"üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ {text}:\n"
            f"‚Ä¢ –û–∫–ª–∞–¥: {salary:.0f} —Ä—É–±.\n"
            f"‚Ä¢ –ù–î–§–õ: {ndfl:.0f} —Ä—É–±.\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ: {result:.0f} —Ä—É–±.\n\n"
            f"–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: /start"
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return DAYS_F


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    return ConversationHandler.END


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def setup_handlers():
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choice)],
            SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_salary)],
            DAYS_M: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_days_m)],
            DAYS_15: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_days_15)],
            DAYS_31: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_days_31)],
            DAYS_F: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_days_f)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setup_handlers()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update = Update.de_json(request.get_json(), application.bot)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async def process_update():
            await application.process_update(update)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        asyncio.run(process_update())

        return "", 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return "", 200


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route("/")
def home():
    return "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram"


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.before_first_request
def set_webhook():
    # –ó–∞–º–µ–Ω–∏—Ç–µ yourusername –Ω–∞ –≤–∞—à –ª–æ–≥–∏–Ω PythonAnywhere
    webhook_url = f"https://dimalalov.pythonanywhere.com/webhook"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    application.bot.set_webhook(webhook_url)
    print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


if __name__ == "__main__":
    app.run(debug=True)
